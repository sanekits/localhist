#1626116946
cd trnma.metrics/trainer-notes # to metr
#1626117463
cd /c/Projects/guts.workspace/trnma.metrics # to metric
#1626118089
cd /c/Projects/wsl.HOME/my-home # to my-ho
#1626119651
cd /c/Projects/progress-metrics.workspace/pmpilots # to prog // pilo
#1626183471
cd /c/Projects/training_repos_copier_workspace/trna.training_repos_copier # to repo //
#1626186583
cd /c/Projects/training_repos_copier_workspace/trna.training_repos_copier # to copi //
#1626188372
gpa Cleanup .gitignore # repo-copier commit
#1626200830
vi .bashrc # Create new .bashrc
#1626200830
exec bash # reload my new changeshello_loop "how are you today?"
#1626200830
type -a ls # What sort of command is 'ls'
#1626200830
type -a hello_loop # what sort of command is 'hello_loop'?
#1626259296
cd /c/Projects/progress-metrics.workspace # to metrics
#1626259456
cd /c/Projects/guts.workspace/trnma.metrics # to metri
#1626265808
cd /c/Projects/dev-environment.workspace/trnma.dev-environment # to dev 0
#1626266141
cd /home/lmatheson4/tmp/unix-jul12-autogist # to jul //
#1626266167
cat bash_history_snapshot.txt | grep -v '^#'
#1626266179
cat bash_history_snapshot.txt | grep -v '^#' > tmp1
#1626266239
cat tmp1 | grep # > bash_history_snapshot.txt
#1626348802
cd /c/Projects/docker-workshop # to dock
#1626348871
ls | grep dock # find all docker-named things
#1626348985
cd /c/Projects/trnma.local-dev # to local
#1626349140
cd /c/Projects/local-dev.workspace # to loc
#1626349163
cd /c/Projects/docker.workspace/docker-workshop # to dock
#1626349240
cd /c/Projects/trnma.local-dev # to loca
#1626349379
cd /c/Projects/training_repos_copier_workspace/trna.training_repos_copier # to copi
#1626349523
cd /c/Projects/docker.workspace # to dock //
#1626349545
cd /c/Projects/docker.workspace # to docker
#1626349763
cd /c/Projects/docker.workspace/trnma.local-dev # to loca
#1626349987
git merge trnma/master -X ours # Update jul12/master from trnma/master for local-dev WC
#1626352374
cd /c/Projects/docker.workspace/trnma.local-dev/1-hello-world # to hel
#1626356467
cd /c/Projects/docker.workspace/trnma.local-dev/3-flask-client-server # to 3
#1626356942
cd /c/Projects/docker.workspace/trnma.local-dev/4-troubleshooting-composable # to 4
#1626359698
cd /c/Projects/docker.workspace/trnma.local-dev/1-hello-world # to 1
#1626360086
cd /c/Projects/docker.workspace/trnma.local-dev/2-hello-world-docker-compose # to 2
#1626375871
cd /c/Projects/docker.workspace/docker-workshop # to docker
#1626433423
cd /c/Projects/row-cohort.workspace # to coho //
#1626433733
lc roster list $abids_class --full # Show full roster of Abid's class to filter by given name
#1626433775
lc roster list $abids_class --full | tr 't' ' ' # Use spaces in output for better matching
#1626437067
[[ #12445254 =~ ^#[[:digit:]]+$ ]]; echo 130 # This regex works to match timestamps
#1626437572
vv="#12445254 asdf"
#1626437582
vv="#12445254"
#1626437600
[[ $vv =~ ^#.* ]]; echo $?
#1626437605
[[ $vv =~ ^#x.* ]]; echo $?
#1626437615
[[ $vv =~ ^#d+ ]]; echo $?
#1626437676
[[ $vv =~ ^#[[:digit:]]+ ]]; echo $?
#1626437685
[[ $vv =~ ^#[[:digit:]]+ $]]; echo $?
#1626437694
[[ $vv =~ ^#[[:digit:]]+$ ]]; echo $?
#1626437711
[[ $vv =~ ^#[[:digit:]]+$ ]]; echo $? # This regex works to match timestamps
#1626437749
echo "[[ $vv =~ ^#[[:digit:]]+$ ]]; echo $? # This regex works to match timestamps" >> bash_history
#1626437971
echo ${#lx}
#1626437977
echo ${#PATH}
#1626439219
sourceMeRun ~/bin/histfile-cleanup.sh cleanup_histstream # Testing histfile-cleanup.sh
#1626440221
lc roster list $abids_class --full | tr 't' ' ' | grep -iF ./ib-header # Match abid's class against ib-header row trainee list
#1626440296
lc roster list $abids_class --full | tr 't' ' ' | ./full-names # (works) match roster vs full names of cohort
#1626469135
cd /home/lmatheson4/tmp/unix-jul12-autogist # to jul
#1626469140
cd /c/Projects/row-cohort.workspace/jun28 # to jun
#1626613701
cd /c/Projects/explore # to explore
#1626613804
python3.8 -i explore_itertools.py # Experiment with itertools
#1626625386
ls / # this is hist
#1626625426
cat ~/.bash_history # testing
#1626625443
ls / # foo2
#1626625464
ls / # foo 3.9
#1626625528
ls / # twe ase
#1626626275
ls / # foo 1
#1626626307
ls / # foo 2
#1626626312
ls / # foo 3
#1626626434
cd /c/Projects/riddle-bin/fizl # to bin
#1626627180
lh s # show hist
#1626627236
lh s # foo2
#1626627315
cd /c/Projects/guts.workspace # to guts //
#1626627604
whoami # foo
#1626627706
echo $foo | tr 't' 'x' # foo
#1626627994
Something in the way she # moves
#1626643917
ls #
#1626644083
ls / #
#1626644222
cd .taskrc # to task
#1626644331
cd /home/lmatheson4/bin # to bin
#1626687698
cd /c/Projects/progress-metrics.workspace/tmp/test.tmp # to test.tm
#1626688130
cd /c/Projects/progress-metrics.workspace/pm_reportserv/test/test_bigsheet.d # to shee
#1626689029
cd test/test_indivreport.d # to indiv
#1626714333
cd /c/Projects/progress-metrics.workspace/pm_reportserv/test/test_full.d # to full
#1626714455
code --diff test_full_db-out.html new-report-db.html #
#1626715570
code pm_reportserv/version #
#1626715621
cd /c/Projects/progress-metrics.workspace/pm_reportserv/pm_reportserv/pmsys_common # to sys
#1626715631
cd /c/Projects/progress-metrics.workspace/pm_sys # to pm_sys //
#1626723792
upload_bb_pypi #
#1626724068
ln -sf .config/bb-artifactory/bb-artifactory-upload.config ./ # configure bb artifactory upload
#1626730011
upload_bb_pypi # upload v0.7.1
#1626738508
cd /c/Projects/explore # to explore //
#1626738601
cd /c/Projects/explore # to explor
#1626739074
cd /c/Projects/explore # to explore 0
#1626740614
cd /c/Projects/unix/labs/bashdock # to bash
#1626777479
cd /home/lmatheson4/tmp/unix-jul12-autogist # to unix
#1626777516
cd /c/Projects/unix/labs/bashdock # to unix 1
#1626777846
code ~/bin/localhist #1626777850
#1626779044
cd /c/Projects/progress-metrics.workspace/pm_reportserv # to repo
#1626779946
cd /c/Users/MathesonLes/AppData/Roaming/Code/User # to Code //
#1626780125
cd /c/Projects/unix.workspace/trnma.unix # to unix
#1626782252
cd /c/Projects/docker.workspace/trnma.local-dev # to local //
#1626783353
echo Resolving local-dev issues from july 12 delivery #
#1626784680
git show trnma/master:./README.md >README.md # revert repo-copier effects
#1626784729
ff=Makefile; git show trnma/master:./${ff} >${ff} # revert repo-copier effects (2)
#1626784890
ff=local-development-overview.md; git show trnma/master:./${ff} >${ff} # revert repo-copier effects (2)
#1626784956
ff=objectives; git show trnma/master:./${ff} >${ff} # revert repo-copier effects (2)
#1626785013
ff=introduction.md; git show trnma/master:./${ff} >${ff} # revert repo-copier effects (2)
#1626785037
ff=index.md; git show trnma/master:./${ff} >${ff} # revert repo-copier effects (2)
#1626789293
cd /c/Projects/cpp.workspace # to cpp //
#1626797933
cd /c/Projects/trnma.bas # to bas //
#1626805494
cd /c/Projects/comdb2.workspace/trnma.comdb2 # to comdb
#1626805804
git push -u jul12 __pmpublish_ref__:add_pmpublish # setup pm_publish for july 12 comdb2
#1626813254
git reset --hard trnma/master # local-dev
#1626870545
cd /c/Projects # to Proj 0
#1626870756
wget https://github.com/wagoodman/dive/releases/download/v0.10.0/dive_0.10.0_linux_amd64.deb # download dive
#1626871431
docker image ls | grep python # Find images
#1626874656
ga settings.json.strip-and-sort.sh # Adopt the stableburner version
#1626876936
cd /c/Projects/guts.workspace/trnma.metrics # to metr
#1626879233
cd /c/Projects/guts.workspace/trnma.metrics/labs/bannerguts # to bann
#1626886314
pylintish bannerguts.py #
#1626886472
black bannerguts.py #
#1626886781
loop python3.8 ./bannerguts.py # loop test bannerguts.py
#1626926762
cd /c/Projects/progress-metrics.workspace/pm_publish # to pub //
#1626927885
cd /c/Users/MathesonLes/AppData/Roaming/Code/User # to Code
#1626952993
cd /c/Projects/riddle/1pp # to 1pp
#1626981338
cd /c/Projects/training_repos_copier_workspace/trna.training_repos_copier # to repo
#1627036083
ssh -O check lmatheson@maczilla #
#1627036241
cd /home/lmatheson4/my-home/zsh # to zsh
#1627212964
cd /c/Projects/middleware.workspace/trnma.middleware-overview # to midd
#1627248774
cd /c/Projects/explore # to explore 0 //
#1627249157
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash # install nvm to manage node versions
#1627249282
echo NVM init stuff is now in ~/.taskrc/nvm.taskrc #
#1627249342
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash # install nvm to manage node versions
#1627249463
bb-inet-proxy-shell nvm install --lts # Install node.js
#1627249492
nvm install --lts # Install node.js
#1627250165
npx create-react-app my-app # Create my-app
#1627250477
cd /c/Projects/explore/react # to react
#1627296424
sudo /opt/bb/bin/apt-get install kafkacat # Installing kafkacat in wsl
#1627297694
cd /c/Projects/middleware.workspace/kafka # to midd
#1627297989
cd /c/Projects/middleware.workspace/trnma.middleware-overview # to midd //
#1627298165
echo Lets build a kafkacat-based chat app # Jun21 middleware lab
#1627299543
cd /home/lmatheson4/my-home # to my-ho //
#1627384843
cd /c/Projects/unix.workspace/trnma.unix # to unix //
#1627386908
cd tmp/unix-jul12-autogist # to unix
#1627389565
cd /c/Projects/unix.workspace/trnma.unix/examples/dotfiles # to unix 2
#1627392443
git fetch jun28 && gco master && git reset --hard jun28/master # Setup dmp for jun28
#1627401595
ls -al # List all the files in this dir, long format
#1627402182
echo $HISTFILE # Show me the path of the history file for my shell
#1627402262
cat $HISTFILE # Show me what is in the history file, which may be different than what's in memory
#1627402374
history # Show me my in-memory history
#1627402392
cat $HISTFILE # Show me what's in the hist file
#1627402655
help history # Getting help for the shell history
#1627412727
cd # all by itself, this goes to HOME dir
#1627413267
touch dumfile # use the touch command to create a new empty file
#1627413318
ls -alrt # All files, sorted in reverse-time order
#1627413725
i=3 # Set variable i = 3 do not use spaces around the =
#1627413747
echo $i # this is how we read a variable to the screen
#1627413907
echo $i # In the parent shell, this is defined
#1627413915
bash # create child shell
#1627413980
export i # This is how the parent gives access to i for a child shell
#1627413994
bash # Create another child
#1627414372
echo $PATH # The PATH is a very important built-in variable which defines the list of directories used to search for programs
#1627416966
ls | grep index # List files, throw out anything that doesn't contain 'index'
#1627417408
type -a ls # How we find out what type of command something is
#1627417446
unalias ls # This removes the alias 'ls'
#1627417516
alias ls='ls --color=auto' # This is how we define an alias
#1627417665
type -a loop_hello # What type of thing is loop_hello
#1627417709
loop_hello() { while true; do echo hello world; sleep 3; done; } # This is how we define a function
#1627417854
type -a help # What sort of thing is 'help'
#1627473814
echo Wednesday morning #
#1627473979
./autocommit_run.sh -p 10 # sync unix github bash_history
#1627473982
autocommit_run.sh -p 10 # sync unix github bash_history
#1627477777
pwd -P # What dir am I in?
#1627477886
cd - # Return to previous dir
#1627477893
.3 # Go up 3 levels
#1627478357
cd /c/Projects/dmp.workspace/trnma.dmp/labs/publisher/1-simple-publisher # to pub
#1627479463
echo $$; bash # Launch subshell
#1627479811
( cd / ; ls ) # Do that same looking at root files without changing current dir
#1627479926
mystuff=$( cd /; ls ) # Capture that dir list as a variable named mystuff
#1627479976
echo $mystuff # Now we can see what the subshell said
#1627480527
uname # What kind of unix is this?
#1627480535
uname -a # What kind of unix is this?
#1627481766
myfunc() { local arg1=$1; local arg2=$2; shift 2; local arg_remaining="$@"; echo "arg1=$arg1"; echo "arg2=$arg2"; echo "args_remaining=$@"; } # Defining a function which takes arguments
#1627482484
( cd foonot ; echo hello ) # Output both error and standard in one command
#1627482511
( cd foonot 2>/dev/null; echo hello ) # Output both error and standard in one command
#1627482563
( cd foonot ; echo hello 1>/dev/null ) # Output both error and standard in one command
#1627482625
( cd foonot ; echo hello ) &>/dev/null # Output both error and standard in one command
#1627483174
tr '#' '_'
#1627483243
< taskrc.md tr '#' '_'
#1627483270
< taskrc.md tr '#' '_' # This is how we can redirect the input to a program (tr in this case)
#1627483643
which kafkacat # Find kafkacat
#1627484164
man bash # the man command runs man(uals) for a given command
#1627503444
sudo apt-get install tree # This is how we install software on wsl
#1627503460
brew install tree # This is how we install software on mac
#1627503492
push ~ # Change to this dir, and "push" the current dir onto a stack
#1627503498
pushd ~ # Change to this dir, and "push" the current dir onto a stack
#1627503655
cp -r trnfolsv something-else # this is how we copy a whole dir
#1627503775
mv something-else i-meant-to-say-this # This is how we rename or move a file or dir
#1627503890
mkdir i-want-this-dir-to-exist # this is how we create dirs
#1627503988
echo ${DIRSTACK[@]} # This is "how to extract the value of an array variable"
#1627573133
cd /home/lmatheson4/journal # to jour lc --down exec bash ls -al wsl -l -v wsl.exe -l -v exit cd /mnt/c ls pwd cd ls -a ls -al ls .bashrc ls -al .bashrc exec bash ls -al .profile .bash_profile uname uname -a source .bashrc source ~/.bashrc pwd -P ls -al .bashrc source bin/bashrc-common cd bin cd /c/Projects ls -al exit
#1627573721
echo /c/Projects/training_repos_copier_workspace/trna.training_repos_copier/training_repos_copier.py makeconfig > rosters/jun28.cfg # Create a dummy cfg for abids class
#1627573732
echo ./training_repos_copier.py rosters/jun28.cfg remove dmp # Drop the old dmp
#1627573764
./training_repos_copier.py create rosters/jun28.cfg # Rebuild dmp repo for jun28
#1627573833
/c/Projects/training_repos_copier_workspace/trna.training_repos_copier/training_repos_copier.py makeconfig > rosters/jun28.cfg # Create a dummy cfg for abids class
#1627573934
./training_repos_copier.py create rosters/jun28.cfg dmp # Rebuild dmp repo for jun28
#1627576058
cd /c/Projects/progress-metrics.workspace/landlord # to metrics
#1627576066
cd /c/Projects/guts.workspace/trnma.metrics # to metr //
#1627576165
/c/Projects/guts.workspace/guts-flow-gist # This is for having the guts network team help with presentation Aug 3
#1627578058
cd /c/Projects/dmp.workspace/trnma.dmp/labs/publisher/1-simple-publisher # to dmp //
#1627645601
cd /c/Projects/dmp.workspace/trnma.dmp # to dmp
#1627645604
cd /c/Projects/dmp.workspace/trnma.dmp/labs/publisher-advanced/7-bas-dmp/solution # to 7
#1627646098
dc exec trndmpsv basclient -x trndmpsv.xsd --uuid 1 requests/add-city-lu.json # Test lab7 add-city
#1627657983
cd /c/Projects/middleware.workspace/trnma.middleware-overview # to middl //
#1627658091
cd /c/Projects/middleware.workspace/trnma.middleware-overview # to middle
#1627675386
cd /c/Projects/middleware.workspace/trnma.middleware-overview # to middl
#1627675632
git reset --hard jun28/master # middleware teach prep
#1627917776
cd /c/Projects/middleware.workspace/kafka.docker/kafka # to kafk
#1627918135
cd /c/Projects/middleware.workspace/kafka # to kaf
#1627918139
cd /c/Projects/middleware.workspace/trnma.middleware-overview/labs/kafkachat # to kaf
#1627942278
curl http://artprod.dev.bloomberg.com/artifactory/bb-public-bucket-local/tdoc/landlord/v0.6.2/setup-landlord.sh | sh - # Setup landlord v0.6.2
#1627942498
cd /home/lmatheson4/journal # to jour
#1627942721
vim rosters.taskrc # Add Tom's new Aug 9 class
#1627943328
cd /c/Projects/progress-metrics.workspace/landlord/landlord/libexec # to libex
#1627948198
cat | xargs landcli roster add $toms_class # Paste column of trainee data into roster-add
#1627987365
lc -i roster remove tmp/aug9-roster # Use roster file to load trainee idents
#1627987566
lc -i roster remove aug9-roster # Use roster file to load trainee idents
#1628090226
cd /c/Projects/unix.workspace # to unix
#1628090500
HISTFILE=/home/lmatheson4/.bash_history # Switching from /home/lmatheson4/.bash_history
#1628090595
HISTFILE=/home/lmatheson4/.bash_history # Switching from /c/Projects/progress-metrics.workspace/pm_reportserv/bash_history
#1628090595
HISTFILE=/home/lmatheson4/.bash_history  # Switching from /c/Projects/progress-metrics.workspace/pm_reportserv/bash_history
#1628122853
cd /c/Projects/dmp.workspace/trnma.dmp/labs/publisher/1-simple-publisher # to dmp
#1628122855
HISTFILE=/c/Projects/dmp.workspace/bash_history # Switching from /home/lmatheson4/.bash_history
#1628161030
sudo apt install groff # install groff so we can use "man -Tpdf"
#1628161128
sudo apt install groff # install groff so we can use "man -Tpdf".  The default installation was just groff-base"
#1628162511
echo $#
#1628162524
set -- "hello world"  # Set positional args
#1628162630
set -- 1 2 3 4 5 6 7 8 9 a b c d e f g h # lots of positional params
#1628162797
cd /c/Projects/explore # to explo
#1628162952
va=(1 2 3 4 5 6 7 8 9 a b c d e f g h) # make an array 'va'
#1628163014
echo "# Working the shell parameter expansion examples in https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion"
#1628268448
HISTFILE=/home/lmatheson4/.bash_history  # Switching from ^c^Projects^bedtime-bound^bash_history
#1628268515
grep -Ev '^#' $HISTFILE
#1628268521
grep -Ev '^#' $HISTFILE | wc -l
#1628268528
grep -Ev '^#\d+' $HISTFILE | wc -l
#1628268549
grep -Ev '^#[0-9]+' $HISTFILE | wc -l
#1628277413
cd /c/Projects/progress-metrics.workspace/pm_reportserv/pm_reportserv/templates/auto_heatmap # to prog
#1628277575
cd /home/lmatheson4/bin # to bin //
#1628277579
cd /home/lmatheson4/bin # to bin 0 //
#1628283758
chmod +x ~/bin/localhist-catalog.sh # Let's have a way to catalog the .localhist content
#1628283830
localhist-catalog.sh # t1
#1628284390
cd /c/Projects/guts.workspace # to guts
#1628289547
cd bin # to bin
#1628289764
cd /c/Projects/progress-metrics.workspace/landlord # to landlo
#1628289795
gpa Improves ELT-class-setup.md #
#1628290322
set -- "${var[*]}" # Expand var into $1
#1628290337
set -- "${var[@]}" # Expand var into multiple args
#1628290359
var[2]=world # TIL you can just make up array vars on the fly if you use brackets!
#1628291059
var=( $* )  # TIL you can init an array like this
#1628291059
var=( $* ) # TIL you can init an array like this
#1628291352
echo myfile.{py,c,o}  # Remember brace expansion?  It doesn't have to refer to files
#1628291392
vcol=( col{red,green,blue} )  # Example of non-file brace expansion
#1628291610
echo {1..10} # You forgot all about sequence expansion: here's 10 digits
#1628291632
set -- {1..10}  # positional args
#1628291769
echo \${1..10}  # Creates $1 $2 $3...
#1628291875
echo \${1..10} # Creates $1 $2 $3...
#1628292438
cd /home/lmatheson4/bin # to bin // 0
#1628292608
echo {a..z..3} # Expand from a to z skipping 3 chars
#1628292677
echo {01..109} # If you add a leading 0, all results have the same width
#1628292725
echo {z..a}  # You can do this backwards also
#1628292923
for vv; do echo -en "\033[${vv};0m${vv}|"; done  # Variation
#1628292933
for vv; do echo -en "\033[${vv};30m${vv}|"; done  # Variation
#1628293120
echo ~+ # An alias for $PWD
#1628293135
echo ~- # An alias for OLDPWD
#1628293163
ls ~-  # this is worth practicing, so you can ls the old dir
#1628293259
cd /c/Projects/dmp.workspace/trnma.dmp/labs/publisher/1-simple-publisher # to trnma
#1628293301
cd /c/Projects/unix.workspace/trnma.unix/examples/dotfiles # to unix //
#1628293671
HISTFILE=/home/lmatheson4/.bash_history  # Switching from t1
#1628294148
xx=PATH; echo #{!xx}  # Bet you didn't know that variables can be indirect like this
#1628294162
xx=PATH; echo ${!xx}  # Bet you didn't know that variables can be indirect like this
#1628294298
echo ${vc:=32}  # You can set the variable default this way.  If vc is defined, it will be used, otherwise 32 will be assigned
#1628294310
echo ${vc:=39}  # You can set the variable default this way.  If vc is defined, it will be used, otherwise 32 will be assigned
#1628294502
echo ${!HIST*}  # Print all vars that start with HIST
#1628294518
echo ${!B*}  # Print all vars that start with B
#1628298321
echo $(<hello)  # Did not know you could use this instead of 'cat hello'
#1628299355
alias ss='( echo "hello"; read -p "u haz question?"; )'  # You have underestimated aliases
#1628299538
shopt -s expand_aliases  # TIL that it's possible to expand aliases in a shell script!
#1628299692
for vv; do echo -en "\033[;${vv}m${vv}|"; done  # How to make a quick-and-dirty color chart!
#1628300544
declare -i vv=32; (( vv >>= 2 )); echo $vv  # did you know that C-style bit math is done?
#1628300580
declare -i vv=32; (( vv %= 10 )); echo $vv  # And modulo-arithmetic?
#1628300769
declare -i vv=0x1000; (( vv >> 3 )); echo $vv  # And hex values
#1628300891
type -a [  # Actually [ is a built-in as well as ext command
#1628301133
[[ hello -nt bash_history ]]; echo $?  # Did you know that modification times can be compared with -nt and -ot ??
#1628301138
[[ hello -ot bash_history ]]; echo $?  # Did you know that modification times can be compared with -nt and -ot ??
#1628301195
[[ hello -ef hello2 ]]; echo $?  # Compare inodes for equality!
#1628301204
[[ hello -ef bash_history ]]; echo $?  # Compare inodes for equality!
#1628332042
hisg \#
#1628332314
for vv in {0..99}; do echo -en "\033[;${vv}m${vv}|"; done  # one-line colorchart
#1628333337
CDPATH=:~:/c/Projects # cdpath simple
#1628336071
localhist-merge.sh # t2
#1628336854
echo ${#}
#1628336864
echo ${${#}}
#1628337208
/home/lmatheson4/bin/localhist-merge.sh ^c^Projects^dmp.workspace^bash_history ^c^Projects^elt-classmgr.workspace^may24^bash_history /tmp/foo  # t2
#1628337221
/home/lmatheson4/bin/localhist-merge.sh ^c^Projects^dmp.workspace^bash_history ^c^Projects^elt-classmgr.workspace^may24^bash_history -o /tmp/foo  # t2
#1628337826
/home/lmatheson4/bin/localhist-merge.sh ^c^Projects^dmp.workspace^bash_history ^c^Projects^elt-classmgr.workspace^may24^bash_history -o /tmp/foohist  # t3
#1628338010
echo "${vv[@]}" # dump
#1628339224
vv+=(13)  # Adding a new value to end of array 'vv'
#1628381076
PS1="\#"
#1628381997
cd /c/Projects/unix.workspace/trnma.unix/examples/dotfiles # to unix
#1628383702
shopt -u progcomp  # turning off programmable completion
#1628383789
shopt | grep sourcepath # TIL that sourcepath opt is why I can source files on the PATH
#1628388666
shopt -s progcomp  # TIL that Ctrl+R Ctrl+R recalls most-recently searched term!
#1628425525
complete -W "now tomorrow never" dothis  # If the completion possibilities are simple, a -W can just list them
#1628425534
function dothis {    echo "dothis invoked with $@"; }  # For testing bash completion
#1628425622
complete -A directory dothis # How to supply dir names as completion options
#1628425642
dothis .vscode/ # demo of dir
#1628425697
complete -A file dothis # How to supply file names as completion options
#1628425756
complete -A function dothis # How to supply function names 
#1628425856
complete -r dothis  # It can take multiple -r's to remove a completion if it was added more than once
#1628426060
complete -p # List all completions
#1628426156
echo # Just understanding the "complete -F" output is half the job, if you can borrow the completion logic of an existing function you can wrap it or reuse it 
#1628426515
_dothis_completions()  {   COMPREPLY+=("now");   COMPREPLY+=("tomorrow");   COMPREPLY+=("never"); };  # tv1
#1628426770
compgen -W "now tomorrow never"  # Trying to understand compgen
#1628426778
compgen -W "now tomorrow never" nev # Trying to understand compgen
#1628427092
_cstb_term=/dev/pts/17 # set debug terminal for tv1
#1628427119
. /c/Projects/explore/bash/_dothis_completions.bash # reload tv1
#1628427511
complete -F _dothis_completions dothis # Register tv1
#1628428060
PATH="$PATH:$PWD"  # just testing dothis
#1628428077
_cstb_term=/dev/pts/11 # set debug terminal for tv1
#1628428162
echo ${#DIRSTACK[@]}
#1628429263
source ~/bin/localhist_completion.bash # tv2
#1628430056
source  /c/Projects/explore/bash/_dothis_completions.bash # reload tv1
#1628432328
HISTFILE=/home/lmatheson4/.bash_history  # Switching from /home/lmatheson4/bash_history
#1628436670
cd /home/lmatheson4/.taskrc # to task
#1628437307
cd /c/Projects/zap_container # to zap
#1628504908
source /home/lmatheson4/bin/tmuxw_completion.bash # lfw
#1628504914
export _cstb_term=/dev/pts/2 # wfl
#1628506019
cd /c/Projects/progress-metrics.workspace/landlord # to landl
#1628536907
source dockershell_completion.bash arg1 arg2  # Never realized that the positional args are set during a source.  This could be useful for tools like taskrc
#1628537193
break 3 # TIL that break can exit from nested control sections
#1628537948
cd /c/Projects/middleware.workspace/kafka # to unix kaf
#1628537978
cd /c/Projects/progress-metrics.workspace/pmpilots/trnma.bas # to prog //
#1628539721
cd /c/Projects/explore/bash # to bash
#1628539961
echo # TIL that it makes sense to override built-in cd with function cd, so that tox_w can be called if cd fails
#1628543580
continue 2 # TIL that continue also allows nest-depth specification
#1628544465
shopt -s extdebug; declare -Ff tox_w  # TIL you can print the line/file for a declaration!
#1628545010
disable echo; echo This is a disk command  # TIL you can disable built-ins!
#1628545024
enable -d echo; echo This is a disk command  # TIL you can disable built-ins!
#1628545039
enable -n echo; echo This is a disk command  # TIL you can disable built-ins!
#1628559870
exec -a foobar bash # TIL you can set the arg0 with -a
#1628561514
foo() {   local -  # Make shell options local!;   set -x  # Now this won't affect caller?;   echo hello; }
#1628561572
foo() {   local -  # Make shell options local!;   set -x  # Now this won't affect caller?;   echo hello; }  # TIL you can local-scope the shell options with "local -"
#1628561594
foo() {   local -  # Make shell options local!;   set -x  # Now this wont affect caller?;   echo hello; }  # TIL you can local-scope the shell options with "local -"
#1628561671
foo() {   local a=32; local; } # TIL you can write the locals to stdout with just plain 'local'
#1628562971
printf "%s:  %d" hello 32  # We've ignored printf too long
#1628675413
cd /c/Projects/progress-metrics.workspace/landlord # to landlord
#1628677189
cd /c/Projects/progress-metrics.workspace/landlord # to land
#1628678577
printf "this is my format string: %(%F)T" -1 # printf is underrated: the ability to do all of C printf, plus the %T which takes a -1 for current time, plus the abilty todo echo-style escape sequences?  That's a lot
#1628678674
printf -v varg "this is my format string: %(%F)T" -1 # More printf goodness: it can create/update a variable with -v, skipping a whole command-substitution
#1628678844
lx="aa|bb|cc" # setup for read word-splitting test
#1628678893
IFS=$"|\n" read a b c <<< "$lx"  # Here we parse on the bar 
#1628678974
IFS=$"|\n" read -a myary <<< "$lx"  # Parsing lx into my array
#1628679425
echo Hello world # Never heard of -v before, but it echoes commands before execution.  What would be the use case?
#1628680437
cd /c/Projects/progress-metrics.workspace # to prog
#1628680441
cd /c/Projects/progress-metrics.workspace/pm_reportserv/pm_reportserv/templates # to prog
#1628680446
cd /c/Projects/progress-metrics.workspace/tmp/test.tmp # to prog
#1628680467
cd /c/Projects/progress-metrics.workspace/pmpilots # to pilo
